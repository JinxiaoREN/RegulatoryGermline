# Call germline variant

GENOME_FA = "/diskmnt/Datasets/Reference/human_genome/GRCh37-lite/GRCh37-lite.fa"
BAM = "/diskmnt/Datasets/TCGA/example_BAM/TCGA-73-4677-11A-01D-1203-02_IlluminaHiSeq-DNASeq_whole.bam"
INTERVALPREFIX = "/diskmnt/Projects/Users/wliang/Germline_Noncoding/06_Cloud_Variant_Calling/RegulatoryGermline/reference/interval_chr"
CHR=[str(i) for i in range (1,23)]
CHR.append("X")
CHR.append("Y")

### Run GATK HaplotypeCaller and Select Variant
rule gatk_haplotypecaller:
    input: 
        genome_fa = GENOME_FA,
        bam = BAM,
        interval = f"{INTERVALPREFIX}{{ix}}.list"
    output: "gatk.raw.chr{ix}.vcf"
    shell: "gatk HaplotypeCaller -R {input.genome_fa} -I {input.bam} -L {input.interval} -O {output} --standard-min-confidence-threshold-for-calling 30.0"

rule gatk_selectvariant_snp:
    input:
        genome_fa = GENOME_FA,
        input_vcf = "gatk.raw.chr{ix}.vcf"
    output: "gatk.snp.chr{ix}.vcf"
    shell: "gatk SelectVariants -R {input.genome_fa} -V {input.input_vcf} -O {output} -select-type SNP -select-type MNP"

rule gatk_selectvariant_indel:
    input:
        genome_fa = GENOME_FA,
        input_vcf = "gatk.raw.chr{ix}.vcf"
    output: "gatk.indel.chr{ix}.vcf"
    shell: "gatk SelectVariants -R {input.genome_fa} -V {input.input_vcf} -O {output} -select-type INDEL"

#def resolve_raw(wildcards):
#    df[sample == wildcards.ix]['path']

#rule test:
#    input: raw=resolve_raw
#    output: 'path_{ix}.out'

VAR=["snp", "indel"]
rule gatk_merge_vcf:
    input: calls= expand('gatk.{var}.chr{ix}.vcf', ix=CHR, var=VAR)
    output: "gatk.{var}.vcf"
    wrapper: "0.26.0/bio/bcftools/concat"

###Run Varscan
rule varscan_mpileup2snp:
    input:
         genome_fa = GENOME_FA,
         bam = BAM
    output:"varscan.snp.chr{ix}.vcf"
    shell: "samtools mpileup -q 1 -Q 13 -f {input.genome_fa} -R chr{{ix}} {input.bam} | awk NR==6 | varscan mpileup2snp - --min-coverage 3 --min-var-freq 0.10 --p-value 0.10 --strand-filter 1 --output-vcf 1 > {output}"

rule varscan_mpileup2indel:
    input:
         genome_fa = GENOME_FA,
         bam = BAM
    output:"varscan.indel.chr{ix}.vcf"
    shell: "samtools mpileup -q 1 -Q 13 -f {input.genome_fa} -R chr{{ix}} {input.bam} | awk NR==6 | varscan mpileup2indel - --min-coverage 3 --min-var-freq 0.10 --p-value 0.10 --strand-filter 1 --output-vcf 1 > {output}"

rule varscan_merge_vcf:
     input: calls= expand('varscan.{var}.chr{ix}.vcf', ix=CHR, var=VAR)
     output: "varscan.{var}.vcf"
     wrapper: "0.26.0/bio/bcftools/concat"


###Run Pindel
pindel_types = ["D", "INV", "TD", "SI"]

with open("pindel_config.txt", "w") as f:
    f.write (f"{BAM}	500	TCGA-73-4677-11A-01D-1203-02")

rule pindel_call:
    input:
        ref = GENOME_FA,
        samples = BAM,
        config= "pindel_config.txt"
    output:
        expand("pindel/chr1_{type}", type=pindel_types)
    params:
        prefix="pindel/chr1",
        extra="-x 4 -w 0.1 -B 0 -M 3 -J pindel-centromere-exclude.bed -c 22"
    log:
        "logs/pindel_chr1.log"
    threads: 4
    wrapper: "0.26.0/bio/pindel/call"

rule generate_pindel_filter_config:
    input: expand("pindel/chr1_{type}", type=pindel_types)
    output: "pindel.out.chr1.raw"
    shell: "ls {input} > outlist; cat `for i in outlist; do cat ${{i}}; done` | grep ChrID > {output}"

with open("pindel.input.37.txt", "w") as f:
    f.write ( \
         f"pindel.filter.pindel2vcf = /opt/conda/bin/pindel2vcf\n \
         pindel.filter.variants_file = pindel.out.chr1.raw\n \
         pindel.filter.REF = /diskmnt/Datasets/Reference/human_genome/GRCh37-lite/GRCh37-lite.fa\n \
         pindel.filter.date = 000000\n \
         pindel.filter.heterozyg_min_var_allele_freq = 0.2\n \
         pindel.filter.homozyg_min_var_allele_freq = 0.8\n \
         pindel.filter.mode = germline\n \
         pindel.filter.apply_filter = true\n \
         pindel.filter.germline.min_coverages = 10\n \
         pindel.filter.germline.min_var_allele_freq = 0.20\n \
         pindel.filter.germline.require_balanced_reads = "true"\n \
         pindel.filter.germline.remove_complex_indels = "true"\n \
         pindel.filter.germline.max_num_homopolymer_repeat_units = 6")



rule filter_pindel:
    input: "pindel.out.chr1.raw"
    output: "pindel.chr1.vcf"
    shell: "perl pindel_filter.v0.5.pl pindel.input.37.txt"


#rule pindel_all_chr:
#    input: expand("pindel/all_{type}_chr{ix}.vcf", type=pindel_types, ix=CHR)

#rule pindel2vcf:
#    input:
#        ref= GENOME_FA,
#        pindel="pindel/all_{type}_chr{ix}"
#    output:
#        "pindel/all_{type}_chr{{ix}}.vcf"
#    params:
#        refname="hg37",
#        refdate="20170110",
#        extra=""
#    log:
#        "logs/pindel/pindel2vcf.{type}.chr{{ix}}.log"
#    wrapper:
#        "0.26.0/bio/pindel/pindel2vcf"

#rule pindel_merge_vcf:
#    input: calls = expand("pindel/all_{{type}}_chr{ix}.vcf", ix=CHR)
#    output: "pindel/all.{type}.vcf"
#    wrapper: "0.26.0/bio/bcftools/concat"

#rule pindel:
#    input: calls = expand("pindel/all.{type}.vcf", type=pindel_types)
#    output: "pindel/all.vcf"
#    wrapper: "0.26.0/bio/bcftools/concat"


rule all_tools:
    input: "gatk.snp.vcf", "gatk.indel.vcf", "varscan.snp.vcf", "varscan.indel.vcf", expand("pindel/all_{type}_chr{ix}.vcf", type=pindel_types, ix=CHR)
